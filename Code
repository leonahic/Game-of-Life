def gol(a,b):
    """ a is length of the edge
        b is number of the generation
        ------------------------------------------------------------
        Rules:
            
        (1) If the cell has less than two alive neighbors, it dies.
        (2) If it has more than three alive neighbors, it also dies.
        (3) If it has exactly two alive neighbors, the cell remains in the state it is in.
        (4) If it has exactly three alive neighbors, the cell becomes alive if it is dead, or stays alive if it is already alive."""
    import numpy as np
    import matplotlib.pyplot as plt
    import matplotlib.animation as animation
    s=np.random.randint(0,2,size=(1,a,a))
    #print(s)
    apm=[]
    for gen in range(b-1):
        n=[]
        for row in range(a):
            for col in range(a):
                if row==a-1 and col!=a-1:
                    if s[0,row,col+1]+s[0,0,col]+s[0,0,col+1]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,col+1]+s[0,0,col-1] < 2:
                            n.append(0)
                    elif s[0,row,col+1]+s[0,0,col]+s[0,0,col+1]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,col+1]+s[0,0,col-1] > 3:
                            n.append(0)
                    elif s[0,row,col+1]+s[0,0,col]+s[0,0,col+1]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,col+1]+s[0,0,col-1] == 2:
                            n.append(s[0,row,col])
                    elif s[0,row,col+1]+s[0,0,col]+s[0,0,col+1]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,col+1]+s[0,0,col-1] == 3:
                            n.append(1)
                elif col==a-1 and row!=a-1:
                    if s[0,row,0]+s[0,row+1,col]+s[0,row+1,0]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,0]+s[0,row+1,col-1] < 2:
                            n.append(0)
                    elif s[0,row,0]+s[0,row+1,col]+s[0,row+1,0]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,0]+s[0,row+1,col-1] > 3:
                            n.append(0)
                    elif s[0,row,0]+s[0,row+1,col]+s[0,row+1,0]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,0]+s[0,row+1,col-1] == 2:
                            n.append(s[0,row,col])
                    elif s[0,row,0]+s[0,row+1,col]+s[0,row+1,0]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,0]+s[0,row+1,col-1] == 3:
                            n.append(1)
                elif col==a-1 and row==a-1:
                    if s[0,row,0]+s[0,0,col]+s[0,0,0]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,0]+s[0,0,col-1] < 2:
                            n.append(0)
                    elif s[0,row,0]+s[0,0,col]+s[0,0,0]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,0]+s[0,0,col-1] > 3:
                            n.append(0)
                    elif s[0,row,0]+s[0,0,col]+s[0,0,0]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,0]+s[0,0,col-1] == 2:
                            n.append(s[0,row,col])
                    elif s[0,row,0]+s[0,0,col]+s[0,0,0]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,0]+s[0,0,col-1] == 3:
                            n.append(1)                    
                elif col!=a-1 and row!=a-1:
                    if s[0,row,col+1]+s[0,row+1,col]+s[0,row+1,col+1]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,col+1]+s[0,row+1,col-1] < 2:
                            n.append(0)
                    elif s[0,row,col+1]+s[0,row+1,col]+s[0,row+1,col+1]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,col+1]+s[0,row+1,col-1] > 3:
                            n.append(0)
                    elif s[0,row,col+1]+s[0,row+1,col]+s[0,row+1,col+1]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,col+1]+s[0,row+1,col-1] == 2:
                            n.append(s[0,row,col])
                    elif s[0,row,col+1]+s[0,row+1,col]+s[0,row+1,col+1]+s[0,row-1,col-1]+s[0,row-1,col]+s[0,row,col-1]+s[0,row-1,col+1]+s[0,row+1,col-1] == 3:
                            n.append(1)
        n=np.array(n)
        n=n.reshape(1,a,a)
        #print(n)
        apm.append(n[0])
        s=n
        
            
    images = []  # empty array to hold plotted patches    
    fig = plt.figure(figsize=(a,a))  # base of plotting
    for i in range(0, b-1):  # for loop to plot patches
        im = plt.imshow(apm[i], cmap='Oranges')  # used for plotting
        images.append([im])  # appending plotted patches
    ani = animation.ArtistAnimation(fig, images, interval=300)  # gif creation from plotted patches
    #matplotlib.pyplot.show()
    ani.save('Game of Life.gif', dpi=100, writer='imagemagick') # saving the gif, imagemagick is tricky
            
       
